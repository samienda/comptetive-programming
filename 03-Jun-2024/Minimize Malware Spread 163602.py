# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Union:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1 for i in range(n)]

    def total(self, x):
        rootx = self.find(x)
        return self.size[rootx]

    def find(self, x):
        if self.parent[x] == x:return x
        self.parent[x] = self.parent[self.parent[x]]
        return self.parent[x]

    def union(self, x, y):
        rootx = self.find(x)
        rooty = self.find(y)

        if rootx != rooty:
            if self.parent[rootx] > self.parent[rooty]:
                self.parent[rooty] = rootx
                self.size[rootx] += self.size[rooty]
            else:
                self.parent[rootx] = rooty
                self.size[rooty] += self.size[rootx]




class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)

        union = Union(n)
        for i in range(n):
            for j in range(n):
                if graph[i][j]:
                    union.union(i, j)

        # print(union.parent)
        count = Counter()
        for x in initial:
            count[union.find(x)] += 1

        # print(count)


        possibleanswer = []
        for x in initial:
            rootx = union.find(x)
            size = union.total(rootx)
            if count[rootx] == 1:
                possibleanswer.append(x) 

            # print(size)
        
        possibleanswer.sort(reverse=True)
        possibleanswer.sort(key=lambda item:union.total(item))
        # print(possibleanswer)
        
        return possibleanswer[-1] if possibleanswer else min(initial)

        
